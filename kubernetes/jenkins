
pipeline {
    agent any

    tools {
        jdk 'jdk-17'       // Specify the Java version (if needed)
        nodejs 'Node16'     // Specify the Node.js version
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'  // Define SonarQube scanner tool
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()  // Clean the workspace before starting
            }
        }

        stage('Checkout from Git') {
            steps {
                // Checkout the Aha OTT project from your GitHub repository
                git branch: 'main', url: 'https://github.com/mahi1155/Aha-ott-project.git'
            }
        }

        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    // Run the SonarQube analysis on the project
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Aha-OTT-Project \
                    -Dsonar.projectKey=Aha-OTT-Project \
                    -Dsonar.sources=src
                    '''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    // Wait for the quality gate to pass or fail
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                // Install project dependencies using npm
                sh 'npm install'
            }
        }

        stage('OWASP Dependency-Check') {
            steps {
                // Perform OWASP dependency-check scan on the project
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Trivy FS Scan') {
            steps {
                // Run a file system scan with Trivy
                sh 'trivy fs . > trivyfs.txt'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    // Build and push the Docker image
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh 'docker build -t mahi1155/aha-ott-project .'
                        sh 'docker tag mahi1155/aha-ott-project:latest mahi1155/aha-ott-project:latest'
                        sh 'docker push mahi1155/aha-ott-project:latest'
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                // Scan the Docker image with Trivy
                sh 'trivy image mahi1155/aha-ott-project:latest > trivyimage.txt'
            }
        }

        stage('Deploy to Container') {
            steps {
                // Deploy the Docker image to a container
                sh 'docker run -d --name aha-ott-project -p 3000:3000 mahi1155/aha-ott-project:latest'
            }
        }
    }

    post {
        always {
            script {
                // Get the build status and user who triggered the build
                def buildStatus = currentBuild.currentResult
                def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: 'GitHub User'

                // Send an email notification after the pipeline execution
                emailext(
                    subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                    <p>This is a Jenkins Aha OTT CICD pipeline status.</p>
                    <p>Project: ${env.JOB_NAME}</p>
                    <p>Build Number: ${env.BUILD_NUMBER}</p>
                    <p>Build Status: ${buildStatus}</p>
                    <p>Started by: ${buildUser}</p>
                    <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    """,
                    to: 'mahendar.sura8@gmail.com', // Your email
                    from: 'mahendar.sura8@gmail.com', // Your email
                    replyTo: 'mahendar.sura8@gmail.com', // Your email
                    mimeType: 'text/html',
                    attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
                )
            }
        }
    }
}

